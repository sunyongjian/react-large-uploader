{"version":3,"sources":["../src/upload.jsx"],"names":["uploadStatusConfig","init","btn","clickName","barClassName","md5","process","done","error","currying","fn","ahead","behind","BigUpload","setFileItem","key","value","id","fileList","state","copy","result","filter","item","length","setState","setUploadStatus","handleFileQueued","auto","props","options","file","percentage","uploadStatus","uploader","md5File","progress","then","val","upload","handleBeforeSend","block","data","fileMd5","md5Val","md5Value","handleUploadProgress","handleUploadError","reason","onChange","handleUploadSuccess","res","response","_raw","retry","getFile","deleteFile","removeFile","isMd5","fileIds","complete","create","chunked","chunkSize","pick","chunkRetry","threads","fileSizeLimit","fileSingleSizeLimit","on","map","name","width","children","border","renderFileList","Component"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;AACA;;;;AACA;;AACA;;;;;;;;;;;;AAGA,IAAMA,qBAAqB;AACzBC,QAAM;AACJC,SAAK,MADD;AAEJC,eAAW,QAFP;AAGJC,kBAAc;AAHV,GADmB;AAMzBC,OAAK;AACHH,SAAK,WADF;AAEHE,kBAAc;AAFX,GANoB;AAUzBE,WAAS;AACPJ,SAAK,SADE;AAEPE,kBAAc;AAFP,GAVgB;AAczBG,QAAM;AACJL,SAAK,MADD;AAEJE,kBAAc;AAFV,GAdmB;AAkBzBI,SAAO;AACLN,SAAK,MADA;AAELC,eAAW,OAFN;AAGLC,kBAAc;AAHT;AAlBkB,CAA3B;;AAyBA,IAAMK,WAAW,SAAXA,QAAW,CAACC,EAAD;AAAA,oCAAQC,KAAR;AAAQA,SAAR;AAAA;;AAAA,SAAkB;AAAA,uCAAIC,MAAJ;AAAIA,YAAJ;AAAA;;AAAA,WAAeF,oBAAMC,KAAN,QAAgBC,MAAhB,EAAf;AAAA,GAAlB;AAAA,CAAjB;;IAEqBC,S;;;AACnB,uBAAc;AAAA;;AAAA;;AAAA,UAgCdC,WAhCc,GAgCA,UAACC,GAAD,EAAMC,KAAN,EAAaC,EAAb,EAAoB;AAAA,UACxBC,QADwB,GACX,MAAKC,KADM,CACxBD,QADwB;;AAEhC,UAAME,oCAAWF,QAAX,EAAN;AACA,UAAMG,SAASD,KAAKE,MAAL,CAAY;AAAA,eAAQC,KAAKN,EAAL,KAAYA,EAApB;AAAA,OAAZ,CAAf;AACA,UAAII,OAAOG,MAAX,EAAmB;AACjBH,eAAO,CAAP,EAAUN,GAAV,IAAiBC,KAAjB;AACA,cAAKS,QAAL,CAAc;AACZP,oBAAUE;AADE,SAAd;AAGD;AACF,KA1Ca;;AAAA,UA4CdM,eA5Cc,GA4CIjB,SAAS,MAAKK,WAAd,EAA2B,cAA3B,CA5CJ;;AAAA,UA8Cda,gBA9Cc,GA8CK,gBAAQ;AAAA,UACjBT,QADiB,GACJ,MAAKC,KADD,CACjBD,QADiB;AAAA,UAENU,IAFM,GAEK,MAAKC,KAFV,CAEjBC,OAFiB,CAENF,IAFM;;AAGzBG,WAAKC,UAAL,GAAkB,CAAlB;AACAD,WAAKE,YAAL,GAAoB,KAApB;AACA,YAAKC,QAAL,CAAcC,OAAd,CAAsBJ,IAAtB,EACGK,QADH,CACY,YAAM;AACd,cAAKV,eAAL,CAAqB,KAArB,EAA4BK,KAAKd,EAAjC;AACD,OAHH;AAIE;AAJF,OAKGoB,IALH,CAKQ,UAACC,GAAD,EAAS;AACb,cAAKZ,eAAL,CAAqB,MAArB,EAA6BK,KAAKd,EAAlC;AACA,cAAKH,WAAL,CAAiB,QAAjB,EAA2BwB,GAA3B,EAAgCP,KAAKd,EAArC;AACA,YAAIW,QAAQG,KAAKE,YAAL,KAAsB,MAAlC,EAA0C,MAAKC,QAAL,CAAcK,MAAd,CAAqBR,IAArB,EAA2BA,KAAKd,EAAhC;AAC3C,OATH;AAUA,YAAKQ,QAAL,CAAc;AACZP,+CAAcA,QAAd,IAAwBa,IAAxB;AADY,OAAd;AAGD,KAhEa;;AAAA,UAkEdS,gBAlEc,GAkEK,UAACC,KAAD,EAAQC,IAAR,EAAiB;AAClC,UAAMX,OAAOU,MAAMV,IAAnB;AACA,UAAMY,UAAUZ,KAAKa,MAArB;AACAF,WAAKG,QAAL,GAAgBF,OAAhB;AACA,YAAKjB,eAAL,CAAqB,SAArB,EAAgCK,KAAKd,EAArC;AACD,KAvEa;;AAAA,UAyEd6B,oBAzEc,GAyES,UAACf,IAAD,EAAOC,UAAP,EAAsB;AAC3C,YAAKlB,WAAL,CAAiB,YAAjB,EAA+BkB,UAA/B,EAA2CD,KAAKd,EAAhD;AACD,KA3Ea;;AAAA,UA6Ed8B,iBA7Ec,GA6EM,UAAChB,IAAD,EAAOiB,MAAP,EAAkB;AACpCjB,WAAKvB,KAAL,GAAawC,MAAb;AACA,YAAKnB,KAAL,CAAWoB,QAAX,CAAoBlB,IAApB;AACA,YAAKL,eAAL,CAAqB,OAArB,EAA8BK,KAAKd,EAAnC;AACD,KAjFa;;AAAA,UAmFdiC,mBAnFc,GAmFQ,UAACnB,IAAD,EAAOoB,GAAP,EAAe;AACnCpB,WAAKqB,QAAL,GAAgBD,IAAIE,IAApB;AACA,YAAKxB,KAAL,CAAWoB,QAAX,CAAoBlB,IAApB;AACA,YAAKL,eAAL,CAAqB,MAArB,EAA6BK,KAAKd,EAAlC;AACD,KAvFa;;AAAA,UAyFdsB,MAzFc,GAyFL,UAACtB,EAAD;AAAA,aAAQ,YAAM;AACrB,cAAKiB,QAAL,CAAcK,MAAd,CAAqBtB,EAArB;AACD,OAFQ;AAAA,KAzFK;;AAAA,UA6FdqC,KA7Fc,GA6FN,UAACrC,EAAD;AAAA,aAAQ,YAAM;AACpB,cAAKS,eAAL,CAAqB,SAArB,EAAgCT,EAAhC;AACA,cAAKiB,QAAL,CAAcoB,KAAd,CAAoB,MAAKpB,QAAL,CAAcqB,OAAd,CAAsBtC,EAAtB,CAApB;AACD,OAHO;AAAA,KA7FM;;AAAA,UAkGduC,UAlGc,GAkGD,UAACvC,EAAD;AAAA,aAAQ,YAAM;AAAA,YACjBC,QADiB,GACJ,MAAKC,KADD,CACjBD,QADiB;;AAEzB,YAAMG,SAASH,SAASI,MAAT,CAAgB,UAACC,IAAD;AAAA,iBAAUA,KAAKN,EAAL,KAAYA,EAAtB;AAAA,SAAhB,CAAf;AACA,cAAKQ,QAAL,CAAc;AACZP,oBAAUG;AADE,SAAd;AAGA,cAAKa,QAAL,CAAcuB,UAAd,CAAyB,MAAKvB,QAAL,CAAcqB,OAAd,CAAsBtC,EAAtB,EAA0B,IAA1B,CAAzB;AACD,OAPY;AAAA,KAlGC;;AAEZ,UAAKE,KAAL,GAAa;AACXD,gBAAU,EADC;AAEXe,oBAAc,MAFH;AAGXyB,aAAO;AAHI,KAAb;AAKA,UAAKC,OAAL,GAAe,EAAf;AACA,UAAKC,QAAL,GAAgB,CAAhB;AARY;AASb;;;;wCAEmB;AAAA,UACV9B,OADU,GACE,KAAKD,KADP,CACVC,OADU;;AAElB,UAAMI,WAAW,2BAAY2B,MAAZ;AACfC,iBAAS,IADM;AAEfC,mBAAW,IAAI,IAAJ,GAAW,IAFP;AAGfC,cAAM,SAHS;AAIfC,oBAAY,CAJG;AAKfC,iBAAS,CALM;AAMfC,uBAAe,OAAO,IAAP,GAAc,IANd;AAOfC,6BAAqB,OAAO,IAAP,GAAc;AAPpB,SAQZtC,OARY;AASfF,cAAM;AATS,SAAjB;AAWAM,eAASmC,EAAT,CAAY,YAAZ,EAA0B,KAAK1C,gBAA/B;AACAO,eAASmC,EAAT,CAAY,kBAAZ,EAAgC,KAAK7B,gBAArC;AACAN,eAASmC,EAAT,CAAY,gBAAZ,EAA8B,KAAKvB,oBAAnC;AACAZ,eAASmC,EAAT,CAAY,aAAZ,EAA2B,KAAKtB,iBAAhC;AACAb,eAASmC,EAAT,CAAY,eAAZ,EAA6B,KAAKnB,mBAAlC;AACA,WAAKhB,QAAL,GAAgBA,QAAhB;AACD;;;qCA6EgB;AAAA;;AAAA,UACPhB,QADO,GACM,KAAKC,KADX,CACPD,QADO;;AAEf,aAAOA,SAASoD,GAAT,CAAa,UAAC/C,IAAD,EAAU;AAAA,YACpBN,EADoB,GACmBM,IADnB,CACpBN,EADoB;AAAA,YAChBsD,IADgB,GACmBhD,IADnB,CAChBgD,IADgB;AAAA,YACVvC,UADU,GACmBT,IADnB,CACVS,UADU;AAAA,YACEC,YADF,GACmBV,IADnB,CACEU,YADF;AAAA,oCAEajC,mBAAmBiC,YAAnB,CAFb;AAAA,YAEpB9B,SAFoB,yBAEpBA,SAFoB;AAAA,YAETD,GAFS,yBAETA,GAFS;AAAA,YAEJE,YAFI,yBAEJA,YAFI;;AAG5B,eACE;AAAA;AAAA,YAAK,KAAKa,EAAV,EAAc,WAAU,WAAxB;AACE;AAAA;AAAA,cAAM,WAAU,WAAhB;AAA6BsD;AAA7B,WADF;AAEE;AAAA;AAAA,cAAM,4BAA0BtC,YAA1B,YAAN,EAAuD,SAAS,OAAK9B,SAAL,IAAkB,OAAKA,SAAL,EAAgBc,EAAhB,CAAlB,GAAwC,IAAxG;AAA+Gf;AAA/G,WAFF;AAGE;AAAA;AAAA,cAAM,WAAU,QAAhB,EAAyB,SAAS,OAAKsD,UAAL,CAAgBvC,EAAhB,CAAlC;AAAA;AAAA,WAHF;AAIE;AAAA;AAAA,cAAK,WAAU,SAAf;AACE,mDAAK,WAAWb,YAAhB,EAA8B,OAAO,EAAEoE,OAAUxC,aAAa,GAAvB,MAAF,EAArC;AADF;AAJF,SADF;AAWD,OAdM,CAAP;AAeD;;;6BAEQ;AAAA,mBAC4B,KAAKH,KADjC;AAAA,UACC4C,QADD,UACCA,QADD;AAAA,UACWC,MADX,UACWA,MADX;AAAA,UACmBH,IADnB,UACmBA,IADnB;;AAEP,UAAMvD,QAAQ0D,SAAS,EAAT,GAAc,EAAEA,QAAQ,MAAV,EAA5B;AACA,aAAQ;AAAA;AAAA;AACN;AAAA;AAAA,YAAK,WAAU,WAAf,EAA2B,OAAO1D,KAAlC;AACE;AAAA;AAAA,cAAK,WAAU,WAAf;AACG,iBAAK2D,cAAL;AADH,WADF;AAIE;AAAA;AAAA,cAAK,WAAU,SAAf;AACE;AAAA;AAAA,gBAAK,IAAG,QAAR;AACGF,0BAAY;AAAA;AAAA,kBAAK,WAAU,aAAf;AAAA;AAAA,eADf;AAEE;AACE,sBAAK,MADP;AAEE,sBAAMF,QAAQ,MAFhB;AAGE,2BAAU;AAHZ;AAFF;AADF;AAJF;AADM,OAAR;AAiBD;;;;EAnJoC,gBAAMK,S;;kBAAxB/D,S","file":"upload.js","sourcesContent":["import React from 'react';\nimport 'expose-loader?$!expose-loader?jQuery!jquery';\nimport WebUploader from '../web/webuploader.nolog.min';\nimport '../web/webuploader.css';\nimport './upload.css';\n\n\nconst uploadStatusConfig = {\n  init: {\n    btn: '开始上传',\n    clickName: 'upload',\n    barClassName: 'process-bar',\n  },\n  md5: {\n    btn: '计算md5中...',\n    barClassName: 'process-bar',\n  },\n  process: {\n    btn: '上传中 ...',\n    barClassName: 'process-bar',\n  },\n  done: {\n    btn: '上传完成',\n    barClassName: 'process-bar success-bar',\n  },\n  error: {\n    btn: '继续上传',\n    clickName: 'retry',\n    barClassName: 'process-bar error-bar',\n  },\n};\n\nconst currying = (fn, ...ahead) => (...behind) => fn(...ahead, ...behind);\n\nexport default class BigUpload extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      fileList: [],\n      uploadStatus: 'init',\n      isMd5: false,\n    };\n    this.fileIds = [];\n    this.complete = 0;\n  }\n\n  componentDidMount() {\n    const { options } = this.props;\n    const uploader = WebUploader.create({\n      chunked: true,\n      chunkSize: 5 * 1024 * 1024,\n      pick: '#picker',\n      chunkRetry: 3,\n      threads: 1,\n      fileSizeLimit: 2000 * 1024 * 1024,\n      fileSingleSizeLimit: 2000 * 1024 * 1024,\n      ...options,\n      auto: false,\n    });\n    uploader.on('fileQueued', this.handleFileQueued);\n    uploader.on('uploadBeforeSend', this.handleBeforeSend);\n    uploader.on('uploadProgress', this.handleUploadProgress);\n    uploader.on('uploadError', this.handleUploadError);\n    uploader.on('uploadSuccess', this.handleUploadSuccess);\n    this.uploader = uploader;\n  }\n\n  setFileItem = (key, value, id) => {\n    const { fileList } = this.state;\n    const copy = [...fileList];\n    const result = copy.filter(item => item.id === id);\n    if (result.length) {\n      result[0][key] = value;\n      this.setState({\n        fileList: copy,\n      });\n    }\n  }\n\n  setUploadStatus = currying(this.setFileItem, 'uploadStatus')\n\n  handleFileQueued = file => {\n    const { fileList } = this.state;\n    const { options: { auto } } = this.props;\n    file.percentage = 0;\n    file.uploadStatus = 'md5';\n    this.uploader.md5File(file)\n      .progress(() => {\n        this.setUploadStatus('md5', file.id);\n      })\n      // 完成\n      .then((val) => {\n        this.setUploadStatus('init', file.id);\n        this.setFileItem('md5Val', val, file.id);\n        if (auto && file.uploadStatus !== 'done') this.uploader.upload(file, file.id);\n      });\n    this.setState({\n      fileList: [...fileList, file],\n    });\n  }\n\n  handleBeforeSend = (block, data) => {\n    const file = block.file;\n    const fileMd5 = file.md5Val;\n    data.md5Value = fileMd5;\n    this.setUploadStatus('process', file.id);\n  }\n\n  handleUploadProgress = (file, percentage) => {\n    this.setFileItem('percentage', percentage, file.id);\n  }\n\n  handleUploadError = (file, reason) => {\n    file.error = reason;\n    this.props.onChange(file);\n    this.setUploadStatus('error', file.id);\n  }\n\n  handleUploadSuccess = (file, res) => {\n    file.response = res._raw;\n    this.props.onChange(file);\n    this.setUploadStatus('done', file.id);\n  }\n\n  upload = (id) => () => {\n    this.uploader.upload(id);\n  }\n\n  retry = (id) => () => {\n    this.setUploadStatus('process', id);\n    this.uploader.retry(this.uploader.getFile(id));\n  }\n\n  deleteFile = (id) => () => {\n    const { fileList } = this.state;\n    const result = fileList.filter((item) => item.id !== id);\n    this.setState({\n      fileList: result,\n    });\n    this.uploader.removeFile(this.uploader.getFile(id, true));\n  }\n\n  renderFileList() {\n    const { fileList } = this.state;\n    return fileList.map((item) => {\n      const { id, name, percentage, uploadStatus } = item;\n      const { clickName, btn, barClassName } = uploadStatusConfig[uploadStatus];\n      return (\n        <div key={id} className=\"file-item\" >\n          <span className=\"file-name\">{name}</span>\n          <span className={`file-status ${uploadStatus}-status`} onClick={this[clickName] ? this[clickName](id) : null}>{btn}</span>\n          <span className=\"delete\" onClick={this.deleteFile(id)}>x</span>\n          <div className=\"process\">\n            <div className={barClassName} style={{ width: `${percentage * 100}%` }}>\n            </div>\n          </div>\n        </div>\n      );\n    });\n  }\n\n  render() {\n    const { children, border, name } = this.props;\n    const value = border ? {} : { border: 'none' };\n    return (<div>\n      <div className=\"container\" style={value}>\n        <div className=\"file-list\">\n          {this.renderFileList()}\n        </div>\n        <div className=\"content\" >\n          <div id=\"picker\">\n            {children || <div className=\"btn-primary\">选择文件</div>}\n            <input\n              type=\"file\"\n              name={name || 'file'}\n              className=\"webuploader-element-invisible\"\n            />\n          </div>\n        </div>\n      </div>\n    </div>);\n  }\n}\n"]}
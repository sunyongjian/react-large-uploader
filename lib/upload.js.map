{"version":3,"sources":["../src/upload.jsx"],"names":["uploadStatusConfig","init","btn","clickName","barClassName","process","done","error","currying","fn","ahead","behind","BigUpload","handleFileQueued","fileList","state","file","percentage","uploadStatus","setState","handleUploadProgress","setFileItem","id","handleUploadError","reason","props","onChange","setUploadStatus","handleUploadSuccess","res","response","_raw","key","value","copy","result","filter","item","length","upload","uploader","retry","getFile","deleteFile","removeFile","fileIds","complete","option","create","auto","chunked","chunkSize","pick","chunkRetry","threads","fileSizeLimit","fileSingleSizeLimit","on","map","name","width","children","border","renderFileList","Component"],"mappings":"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","file":"upload.js","sourcesContent":["import React from 'react';\nimport 'expose-loader?$!expose-loader?jQuery!jquery';\nimport WebUploader from '../web/webuploader.html5only';\nimport '../web/webuploader.css';\nimport './upload.css';\n\n\nconst uploadStatusConfig = {\n  init: {\n    btn: '开始上传',\n    clickName: 'upload',\n    barClassName: 'process-bar',\n  },\n  process: {\n    btn: '上传中 ...',\n    barClassName: 'process-bar',\n  },\n  done: {\n    btn: '上传完成',\n    barClassName: 'process-bar success-bar',\n  },\n  error: {\n    btn: '继续上传',\n    clickName: 'retry',\n    barClassName: 'process-bar error-bar',\n  },\n};\n\nconst currying = (fn, ...ahead) => (...behind) => fn(...ahead, ...behind);\n\nexport default class BigUpload extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      fileList: [],\n      uploadStatus: 'init',\n    };\n    this.fileIds = [];\n    this.complete = 0;\n  }\n\n  componentDidMount() {\n    const { option } = this.props;\n    const uploader = WebUploader.create({\n      auto: false,\n      chunked: true,\n      chunkSize: 5 * 1024 * 1024,\n      pick: '#picker',\n      chunkRetry: 3,\n      threads: 1,\n      fileSizeLimit: 2000 * 1024 * 1024,\n      fileSingleSizeLimit: 2000 * 1024 * 1024,\n      ...option,\n    });\n    uploader.on('fileQueued', this.handleFileQueued);\n    uploader.on('uploadProgress', this.handleUploadProgress);\n    uploader.on('uploadError', this.handleUploadError);\n    uploader.on('uploadSuccess', this.handleUploadSuccess);\n    this.uploader = uploader;\n  }\n\n  handleFileQueued = file => {\n    const { fileList } = this.state;\n    file.percentage = 0;\n    file.uploadStatus = 'init';\n    this.setState({\n      fileList: [...fileList, file],\n    });\n  }\n\n  handleUploadProgress = (file, percentage) => {\n    this.setFileItem('percentage', percentage, file.id);\n  }\n\n  handleUploadError = (file, reason) => {\n    file.error = reason;\n    this.props.onChange(file);\n    this.setUploadStatus('error', file.id);\n  }\n\n  handleUploadSuccess = (file, res) => {\n    file.response = res._raw;\n    this.props.onChange(file);\n    this.setUploadStatus('done', file.id);\n  }\n\n  setFileItem = (key, value, id) => {\n    const { fileList } = this.state;\n    const copy = [...fileList];\n    const result = copy.filter(item => item.id === id);\n    if (result.length) {\n      result[0][key] = value;\n      this.setState({\n        fileList: copy,\n      });\n    }\n  }\n\n  setUploadStatus = currying(this.setFileItem, 'uploadStatus')\n\n  upload = (id) => () => {\n    this.uploader.upload(id);\n  }\n\n  retry = (id) => () => {\n    this.setUploadStatus('process', id);\n    this.uploader.retry(this.uploader.getFile(id));\n  }\n\n  deleteFile = (id) => () => {\n    const { fileList } = this.state;\n    const result = fileList.filter((item) => item.id !== id);\n    this.setState({\n      fileList: result,\n    });\n    this.uploader.removeFile(this.uploader.getFile(id, true));\n  }\n\n  renderFileList() {\n    const { fileList } = this.state;\n    return fileList.map((item) => {\n      const { id, name, percentage, uploadStatus } = item;\n      const { clickName, btn, barClassName } = uploadStatusConfig[uploadStatus];\n      return (\n        <div key={id} className=\"file-item\" >\n          <span className=\"file-name\">{name}</span>\n          <span className={`file-status ${uploadStatus}`} onClick={this[clickName] ? this[clickName](id) : null}>{btn}</span>\n          <span className=\"delete\" onClick={this.deleteFile(id)}>x</span>\n          <div className=\"process\">\n            <div className={barClassName} style={{ width: `${percentage * 100}%` }}>\n            </div>\n          </div>\n        </div>\n      );\n    });\n  }\n\n  render() {\n    const { children, border } = this.props;\n    const value = border ? {} : { border: 'none' };\n    return (<div>\n      <div className=\"container\" style={value}>\n        <div className=\"file-list\">\n          {this.renderFileList()}\n        </div>\n        <div className=\"content\" >\n          <div id=\"picker\">\n            {children || <div className=\"btn-primary\">选择文件</div>}\n            <input\n              type=\"file\"\n              name=\"file\"\n              className=\"webuploader-element-invisible\"\n            />\n          </div>\n        </div>\n      </div>\n    </div>);\n  }\n}\n"]}